// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: jobs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (user_id, name, schedule, endpoint, method, headers, body, active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, name, schedule, endpoint, method, headers, body, active, created_at, updated_at
`

type CreateJobParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Name     string      `json:"name"`
	Schedule string      `json:"schedule"`
	Endpoint string      `json:"endpoint"`
	Method   string      `json:"method"`
	Headers  []byte      `json:"headers"`
	Body     pgtype.Text `json:"body"`
	Active   bool        `json:"active"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.UserID,
		arg.Name,
		arg.Schedule,
		arg.Endpoint,
		arg.Method,
		arg.Headers,
		arg.Body,
		arg.Active,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Schedule,
		&i.Endpoint,
		&i.Method,
		&i.Headers,
		&i.Body,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, user_id, name, schedule, endpoint, method, headers, body, active, created_at, updated_at FROM jobs WHERE id = $1
`

func (q *Queries) GetJob(ctx context.Context, id pgtype.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Schedule,
		&i.Endpoint,
		&i.Method,
		&i.Headers,
		&i.Body,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertJobLog = `-- name: InsertJobLog :one
INSERT INTO job_logs (job_id, started_at, finished_at, duration_ms, status, response_code, error)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, job_id, started_at, finished_at, duration_ms, status, response_code, error
`

type InsertJobLogParams struct {
	JobID        pgtype.UUID        `json:"job_id"`
	StartedAt    pgtype.Timestamptz `json:"started_at"`
	FinishedAt   pgtype.Timestamptz `json:"finished_at"`
	DurationMs   pgtype.Int4        `json:"duration_ms"`
	Status       string             `json:"status"`
	ResponseCode pgtype.Int4        `json:"response_code"`
	Error        pgtype.Text        `json:"error"`
}

func (q *Queries) InsertJobLog(ctx context.Context, arg InsertJobLogParams) (JobLog, error) {
	row := q.db.QueryRow(ctx, insertJobLog,
		arg.JobID,
		arg.StartedAt,
		arg.FinishedAt,
		arg.DurationMs,
		arg.Status,
		arg.ResponseCode,
		arg.Error,
	)
	var i JobLog
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.StartedAt,
		&i.FinishedAt,
		&i.DurationMs,
		&i.Status,
		&i.ResponseCode,
		&i.Error,
	)
	return i, err
}

const listActiveJobs = `-- name: ListActiveJobs :many
SELECT id, user_id, name, schedule, endpoint, method, headers, body, active, created_at, updated_at FROM jobs 
WHERE active = true 
ORDER BY created_at DESC
`

func (q *Queries) ListActiveJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, listActiveJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Schedule,
			&i.Endpoint,
			&i.Method,
			&i.Headers,
			&i.Body,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobLogs = `-- name: ListJobLogs :many
SELECT id, job_id, started_at, finished_at, duration_ms, status, response_code, error FROM job_logs
WHERE job_id = $1
ORDER BY started_at DESC
LIMIT $2 OFFSET $3
`

type ListJobLogsParams struct {
	JobID  pgtype.UUID `json:"job_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListJobLogs(ctx context.Context, arg ListJobLogsParams) ([]JobLog, error) {
	rows, err := q.db.Query(ctx, listJobLogs, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobLog{}
	for rows.Next() {
		var i JobLog
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.StartedAt,
			&i.FinishedAt,
			&i.DurationMs,
			&i.Status,
			&i.ResponseCode,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByUser = `-- name: ListJobsByUser :many
SELECT id, user_id, name, schedule, endpoint, method, headers, body, active, created_at, updated_at FROM jobs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListJobsByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListJobsByUser(ctx context.Context, arg ListJobsByUserParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, listJobsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Schedule,
			&i.Endpoint,
			&i.Method,
			&i.Headers,
			&i.Body,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs
SET
  name = COALESCE($2, name),
  schedule = COALESCE($3, schedule),
  endpoint = COALESCE($4, endpoint),
  method = COALESCE($5, method),
  headers = COALESCE($6, headers),
  body = COALESCE($7, body),
  active = COALESCE($8, active),
  updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, schedule, endpoint, method, headers, body, active, created_at, updated_at
`

type UpdateJobParams struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Schedule string      `json:"schedule"`
	Endpoint string      `json:"endpoint"`
	Method   string      `json:"method"`
	Headers  []byte      `json:"headers"`
	Body     pgtype.Text `json:"body"`
	Active   bool        `json:"active"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, updateJob,
		arg.ID,
		arg.Name,
		arg.Schedule,
		arg.Endpoint,
		arg.Method,
		arg.Headers,
		arg.Body,
		arg.Active,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Schedule,
		&i.Endpoint,
		&i.Method,
		&i.Headers,
		&i.Body,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
